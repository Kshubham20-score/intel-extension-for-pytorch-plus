From 730877fe5a89e11c36ef1873b72083bea9f35c72 Mon Sep 17 00:00:00 2001
From: min-jean-cho <min.jean.cho@intel.com>
Date: Wed, 28 Feb 2024 10:00:30 -0800
Subject: [PATCH 24/31] use ONEMKL_LIBRARIES for mkl libs in torch to not
 overwritten by oneMKL MKL_LIBRARIES cmake config (#208)

---
 caffe2/CMakeLists.txt          |  2 +-
 cmake/Dependencies.cmake       |  4 +--
 cmake/Modules/FindBLAS.cmake   |  2 +-
 cmake/Modules/FindLAPACK.cmake |  4 +--
 cmake/Modules/FindMKL.cmake    | 58 +++++++++++++++++-----------------
 cmake/Modules/FindMKLDNN.cmake |  2 +-
 cmake/public/mkl.cmake         |  2 +-
 7 files changed, 37 insertions(+), 37 deletions(-)

diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 74d0d557190..ceac8d7f521 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -1564,7 +1564,7 @@ if(BUILD_SHARED_LIBS)
   if(USE_MPI)
       target_link_libraries(torch_global_deps ${MPI_CXX_LIBRARIES})
   endif()
-  target_link_libraries(torch_global_deps ${MKL_LIBRARIES})
+  target_link_libraries(torch_global_deps ${ONEMKL_LIBRARIES})
   # The CUDA libraries are linked here for a different reason: in some
   # cases we load these libraries with ctypes, and if they weren't opened
   # with RTLD_GLOBAL, we'll do the "normal" search process again (and
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index c3abce52e4c..6ca8411c56c 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -213,7 +213,7 @@ elseif(BLAS STREQUAL "MKL")
   endif()
   include(${CMAKE_CURRENT_LIST_DIR}/public/mkl.cmake)
   if(MKL_FOUND)
-    message(STATUS "MKL libraries: ${MKL_LIBRARIES}")
+    message(STATUS "MKL libraries: ${ONEMKL_LIBRARIES}")
     message(STATUS "MKL include directory: ${MKL_INCLUDE_DIR}")
     message(STATUS "MKL OpenMP type: ${MKL_OPENMP_TYPE}")
     message(STATUS "MKL OpenMP library: ${MKL_OPENMP_LIBRARY}")
@@ -222,7 +222,7 @@ elseif(BLAS STREQUAL "MKL")
     set(CAFFE2_USE_MKL ON)
     set(BLAS_INFO "mkl")
     set(BLAS_FOUND 1)
-    set(BLAS_LIBRARIES ${MKL_LIBRARIES})
+    set(BLAS_LIBRARIES ${ONEMKL_LIBRARIES})
   else()
     message(WARNING "MKL could not be found. Defaulting to Eigen")
     set(CAFFE2_USE_EIGEN_FOR_BLAS ON)
diff --git a/cmake/Modules/FindBLAS.cmake b/cmake/Modules/FindBLAS.cmake
index 4d5007c625b..5a24195c280 100644
--- a/cmake/Modules/FindBLAS.cmake
+++ b/cmake/Modules/FindBLAS.cmake
@@ -99,7 +99,7 @@ if((NOT BLAS_LIBRARIES)
   FIND_PACKAGE(MKL)
   IF(MKL_FOUND)
     SET(BLAS_INFO "mkl")
-    SET(BLAS_LIBRARIES ${MKL_LIBRARIES})
+    SET(BLAS_LIBRARIES ${ONEMKL_LIBRARIES})
     SET(BLAS_INCLUDE_DIR ${MKL_INCLUDE_DIR})
     SET(BLAS_VERSION ${MKL_VERSION})
   ENDIF(MKL_FOUND)
diff --git a/cmake/Modules/FindLAPACK.cmake b/cmake/Modules/FindLAPACK.cmake
index 02367ff9866..9ca7ff3b661 100644
--- a/cmake/Modules/FindLAPACK.cmake
+++ b/cmake/Modules/FindLAPACK.cmake
@@ -87,9 +87,9 @@ if(BLAS_FOUND)
   # Intel MKL
   IF((NOT LAPACK_INFO) AND (BLAS_INFO STREQUAL "mkl"))
     IF(MKL_LAPACK_LIBRARIES)
-      SET(LAPACK_LIBRARIES ${MKL_LAPACK_LIBRARIES} ${MKL_LIBRARIES})
+      SET(LAPACK_LIBRARIES ${MKL_LAPACK_LIBRARIES} ${ONEMKL_LIBRARIES})
     ELSE(MKL_LAPACK_LIBRARIES)
-      SET(LAPACK_LIBRARIES ${MKL_LIBRARIES})
+      SET(LAPACK_LIBRARIES ${ONEMKL_LIBRARIES})
     ENDIF(MKL_LAPACK_LIBRARIES)
     SET(LAPACK_INCLUDE_DIR ${MKL_INCLUDE_DIR})
     SET(LAPACK_INFO "mkl")
diff --git a/cmake/Modules/FindMKL.cmake b/cmake/Modules/FindMKL.cmake
index b0178ab72e4..6dbd3863b39 100644
--- a/cmake/Modules/FindMKL.cmake
+++ b/cmake/Modules/FindMKL.cmake
@@ -4,7 +4,7 @@
 #  MKL_FOUND - set to true if a library implementing the CBLAS interface is found
 #  MKL_VERSION - best guess of the found mkl version
 #  MKL_INCLUDE_DIR - path to include dir.
-#  MKL_LIBRARIES - list of libraries for base mkl
+#  ONEMKL_LIBRARIES - list of libraries for base mkl
 #  MKL_OPENMP_TYPE - OpenMP flavor that the found mkl uses: GNU or Intel
 #  MKL_OPENMP_LIBRARY - path to the OpenMP library the found mkl uses
 #  MKL_LAPACK_LIBRARIES - list of libraries to add for lapack
@@ -17,7 +17,7 @@ IF (NOT MKL_FOUND)
 
 SET(MKL_VERSION)
 SET(MKL_INCLUDE_DIR)
-SET(MKL_LIBRARIES)
+SET(ONEMKL_LIBRARIES)
 SET(MKL_OPENMP_TYPE)
 SET(MKL_OPENMP_LIBRARY)
 SET(MKL_LAPACK_LIBRARIES)
@@ -319,9 +319,9 @@ ELSE(UNIX AND NOT APPLE)
 ENDIF(UNIX AND NOT APPLE)
 
 # Check for version 10/11
-IF (NOT MKL_LIBRARIES)
+IF (NOT ONEMKL_LIBRARIES)
   SET(MKL_VERSION 1011)
-ENDIF (NOT MKL_LIBRARIES)
+ENDIF (NOT ONEMKL_LIBRARIES)
 
 # First: search for parallelized ones with intel thread lib
 IF (NOT "${MKL_THREADING}" STREQUAL "SEQ")
@@ -329,11 +329,11 @@ IF (NOT "${MKL_THREADING}" STREQUAL "SEQ")
     FOREACH(mkliface ${mklifaces})
       FOREACH(mkl64 ${mkl64s} "")
         FOREACH(mklthread ${mklthreads})
-          IF (NOT MKL_LIBRARIES)
+          IF (NOT ONEMKL_LIBRARIES)
             GET_MKL_LIB_NAMES(mkl_lib_names "${mkliface}" "${mkl64}" THREAD "${mklthread}")
-            CHECK_ALL_LIBRARIES(MKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
+            CHECK_ALL_LIBRARIES(ONEMKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
               "${mkl_lib_names};${mklrtl};${mkl_pthread};${mkl_m};${mkl_dl}" "")
-          ENDIF (NOT MKL_LIBRARIES)
+          ENDIF (NOT ONEMKL_LIBRARIES)
         ENDFOREACH(mklthread)
       ENDFOREACH(mkl64)
     ENDFOREACH(mkliface)
@@ -343,14 +343,14 @@ ENDIF (NOT "${MKL_THREADING}" STREQUAL "SEQ")
 # Second: search for sequential ones
 FOREACH(mkliface ${mklifaces})
   FOREACH(mkl64 ${mkl64s} "")
-    IF (NOT MKL_LIBRARIES)
+    IF (NOT ONEMKL_LIBRARIES)
       GET_MKL_LIB_NAMES(mkl_lib_names "${mkliface}" "${mkl64}" THREAD "mkl_sequential")
-      CHECK_ALL_LIBRARIES(MKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
+      CHECK_ALL_LIBRARIES(ONEMKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
         "${mkl_lib_names};${mkl_m};${mkl_dl}" "")
-      IF (MKL_LIBRARIES)
+      IF (ONEMKL_LIBRARIES)
         SET(mklseq "_sequential")
-      ENDIF (MKL_LIBRARIES)
-    ENDIF (NOT MKL_LIBRARIES)
+      ENDIF (ONEMKL_LIBRARIES)
+    ENDIF (NOT ONEMKL_LIBRARIES)
   ENDFOREACH(mkl64)
 ENDFOREACH(mkliface)
 
@@ -358,42 +358,42 @@ ENDFOREACH(mkliface)
 FOREACH(mklrtl ${mklrtls} "")
   FOREACH(mkliface ${mklifaces})
     FOREACH(mkl64 ${mkl64s} "")
-      IF (NOT MKL_LIBRARIES)
+      IF (NOT ONEMKL_LIBRARIES)
         GET_MKL_LIB_NAMES(mkl_lib_names "${mkliface}" "${mkl64}" THREAD "${mklthread}")
-        CHECK_ALL_LIBRARIES(MKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
+        CHECK_ALL_LIBRARIES(ONEMKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
           "${mkl_lib_names};${mklrtl};pthread;${mkl_m};${mkl_dl}" "")
-      ENDIF (NOT MKL_LIBRARIES)
+      ENDIF (NOT ONEMKL_LIBRARIES)
     ENDFOREACH(mkl64)
   ENDFOREACH(mkliface)
 ENDFOREACH(mklrtl)
 
-IF (MKL_LIBRARIES)
-  SET(CMAKE_REQUIRED_LIBRARIES ${MKL_LIBRARIES})
+IF (ONEMKL_LIBRARIES)
+  SET(CMAKE_REQUIRED_LIBRARIES ${ONEMKL_LIBRARIES})
   check_function_exists("cblas_gemm_bf16bf16f32" MKL_HAS_SBGEMM)
   set(CMAKE_REQUIRED_LIBRARIES)
   IF(MKL_HAS_SBGEMM)
     add_compile_options(-DMKL_HAS_SBGEMM)
   ENDIF(MKL_HAS_SBGEMM)
-ENDIF (MKL_LIBRARIES)
+ENDIF (ONEMKL_LIBRARIES)
 
 # Check for older versions
-IF (NOT MKL_LIBRARIES)
+IF (NOT ONEMKL_LIBRARIES)
   SET(MKL_VERSION 900)
   if (USE_STATIC_MKL)
       message(WARNING "Ignoring USE_STATIC_MKL")
   endif()
-  CHECK_ALL_LIBRARIES(MKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
+  CHECK_ALL_LIBRARIES(ONEMKL_LIBRARIES MKL_OPENMP_TYPE MKL_OPENMP_LIBRARY cblas_sgemm
     "mkl;guide;pthread;m" "")
-ENDIF (NOT MKL_LIBRARIES)
+ENDIF (NOT ONEMKL_LIBRARIES)
 
 # Include files
-IF (MKL_LIBRARIES)
+IF (ONEMKL_LIBRARIES)
   FIND_PATH(MKL_INCLUDE_DIR "mkl_cblas.h")
   MARK_AS_ADVANCED(MKL_INCLUDE_DIR)
-ENDIF (MKL_LIBRARIES)
+ENDIF (ONEMKL_LIBRARIES)
 
 # Other libraries
-IF (MKL_LIBRARIES)
+IF (ONEMKL_LIBRARIES)
   FOREACH(mkl64 ${mkl64s} "_core" "")
     FOREACH(mkls ${mklseq} "")
       IF (NOT MKL_LAPACK_LIBRARIES)
@@ -414,15 +414,15 @@ IF (MKL_LIBRARIES)
       ENDIF (NOT MKL_CDFT_LIBRARIES)
     ENDFOREACH(mkls)
   ENDFOREACH(mkl64)
-ENDIF (MKL_LIBRARIES)
+ENDIF (ONEMKL_LIBRARIES)
 
 # Final
 SET(CMAKE_LIBRARY_PATH ${saved_CMAKE_LIBRARY_PATH})
 SET(CMAKE_INCLUDE_PATH ${saved_CMAKE_INCLUDE_PATH})
-IF (MKL_LIBRARIES AND MKL_INCLUDE_DIR)
+IF (ONEMKL_LIBRARIES AND MKL_INCLUDE_DIR)
   SET(MKL_FOUND TRUE)
-ELSE (MKL_LIBRARIES AND MKL_INCLUDE_DIR)
-  if (MKL_LIBRARIES AND NOT MKL_INCLUDE_DIR)
+ELSE (ONEMKL_LIBRARIES AND MKL_INCLUDE_DIR)
+  if (ONEMKL_LIBRARIES AND NOT MKL_INCLUDE_DIR)
     MESSAGE(WARNING "MKL libraries files are found, but MKL header files are \
       not. You can get them by `conda install mkl-include` if using conda (if \
       it is missing, run `conda upgrade -n root conda` first), and \
@@ -432,7 +432,7 @@ ELSE (MKL_LIBRARIES AND MKL_INCLUDE_DIR)
   endif()
   SET(MKL_FOUND FALSE)
   SET(MKL_VERSION)  # clear MKL_VERSION
-ENDIF (MKL_LIBRARIES AND MKL_INCLUDE_DIR)
+ENDIF (ONEMKL_LIBRARIES AND MKL_INCLUDE_DIR)
 
 # Standard termination
 IF(NOT MKL_FOUND AND MKL_FIND_REQUIRED)
diff --git a/cmake/Modules/FindMKLDNN.cmake b/cmake/Modules/FindMKLDNN.cmake
index 47694f6856e..cee255cab79 100644
--- a/cmake/Modules/FindMKLDNN.cmake
+++ b/cmake/Modules/FindMKLDNN.cmake
@@ -48,7 +48,7 @@ IF(NOT MKLDNN_FOUND)
   IF(MKL_FOUND)
     ADD_DEFINITIONS(-DIDEEP_USE_MKL)
     # Append to mkldnn dependencies
-    LIST(APPEND MKLDNN_LIBRARIES ${MKL_LIBRARIES})
+    LIST(APPEND MKLDNN_LIBRARIES ${ONEMKL_LIBRARIES})
     LIST(APPEND MKLDNN_INCLUDE_DIR ${MKL_INCLUDE_DIR})
   ELSE(MKL_FOUND)
     SET(MKLDNN_USE_MKL "NONE" CACHE STRING "" FORCE)
diff --git a/cmake/public/mkl.cmake b/cmake/public/mkl.cmake
index 22527462b1f..2701c0700f7 100644
--- a/cmake/public/mkl.cmake
+++ b/cmake/public/mkl.cmake
@@ -9,7 +9,7 @@ set_property(
   ${MKL_INCLUDE_DIR})
 set_property(
   TARGET caffe2::mkl PROPERTY INTERFACE_LINK_LIBRARIES
-  ${MKL_LIBRARIES} ${MKL_THREAD_LIB})
+  ${ONEMKL_LIBRARIES} ${MKL_THREAD_LIB})
 # TODO: This is a hack, it will not pick up architecture dependent
 # MKL libraries correctly; see https://github.com/pytorch/pytorch/issues/73008
 set_property(
-- 
2.34.1

