From 13e6c4c2250ab9fd41759091e79aa72deab6c6ca Mon Sep 17 00:00:00 2001
From: "Yu, Guangye" <106960996+guangyey@users.noreply.github.com>
Date: Wed, 10 Apr 2024 11:07:32 +0800
Subject: [PATCH 09/39] Fix record issue on XPUGuardImpl (#123523) (#228)

Previously,  `xpu_event` became a dangling pointer because the variable on the stack is destroyed when the scope ends. It results in these event-related functions (`destroyEvent`, `record`, `block`, and `queryEvent`)  used in `c10/core/impl/InlineEvent.h`, which serves `c10::Event`, do not work correctly.

Use `new` allocated on the heap to assign `xpu_event` to avoid the dangling pointer.

Add a UT to cover this.

Pull Request resolved: https://github.com/pytorch/pytorch/pull/123523
Approved by: https://github.com/EikanWang, https://github.com/jgong5, https://github.com/gujinghui, https://github.com/albanD

(cherry picked from commit 270dd99180112125eab5f91baf32c48682ec3c8e)
---
 c10/xpu/impl/XPUGuardImpl.h        | 13 ++++++--
 c10/xpu/test/impl/XPUGuardTest.cpp | 50 ++++++++++++++++++++++++++++++
 2 files changed, 61 insertions(+), 2 deletions(-)

diff --git a/c10/xpu/impl/XPUGuardImpl.h b/c10/xpu/impl/XPUGuardImpl.h
index 6647e259177..d38688be4b1 100644
--- a/c10/xpu/impl/XPUGuardImpl.h
+++ b/c10/xpu/impl/XPUGuardImpl.h
@@ -66,7 +66,12 @@ struct XPUGuardImpl final : public c10::impl::DeviceGuardImplInterface {
 
   // Event-related functions
   void destroyEvent(void* event, const DeviceIndex device_index)
-      const noexcept override {}
+      const noexcept override {
+    if (!event)
+      return;
+
+    delete reinterpret_cast<sycl::event*>(event);
+  }
 
   void record(
       void** event,
@@ -83,7 +88,11 @@ struct XPUGuardImpl final : public c10::impl::DeviceGuardImplInterface {
 
     auto* xpu_event = reinterpret_cast<sycl::event*>(*event);
     const XPUStream xpu_stream{stream};
-    *xpu_event = xpu_stream.queue().ext_oneapi_submit_barrier();
+
+    // Delete the event previously recorded.
+    if (xpu_event)
+      delete xpu_event;
+    xpu_event = new sycl::event(xpu_stream.queue().ext_oneapi_submit_barrier());
   }
 
   void block(void* event, const Stream& stream) const override {
diff --git a/c10/xpu/test/impl/XPUGuardTest.cpp b/c10/xpu/test/impl/XPUGuardTest.cpp
index df01e90623b..7112068db3e 100644
--- a/c10/xpu/test/impl/XPUGuardTest.cpp
+++ b/c10/xpu/test/impl/XPUGuardTest.cpp
@@ -1,7 +1,9 @@
 #include <gtest/gtest.h>
 
 #include <c10/core/DeviceGuard.h>
+#include <c10/core/Event.h>
 #include <c10/xpu/XPUStream.h>
+#include <c10/xpu/test/impl/XPUTest.h>
 
 bool has_xpu() {
   return c10::xpu::device_count() > 0;
@@ -42,3 +44,51 @@ TEST(XPUGuardTest, GuardBehavior) {
   EXPECT_EQ(streams1[1].device_index(), 1);
   EXPECT_EQ(c10::xpu::current_device(), 0);
 }
+
+TEST(XPUGuardTest, EventBehavior) {
+  if (!has_xpu()) {
+    return;
+  }
+
+  auto device = c10::Device(c10::kXPU, c10::xpu::current_device());
+  c10::impl::VirtualGuardImpl impl(device.type());
+  c10::Stream stream1 = impl.getStream(device);
+  c10::Stream stream2 = impl.getStream(device);
+  c10::Event event(device.type());
+
+  constexpr int numel = 1024;
+  int hostData1[numel];
+  initHostData(hostData1, numel);
+  int hostData2[numel];
+  clearHostData(hostData2, numel);
+
+  auto xpu_stream1 = c10::xpu::XPUStream(stream1);
+  int* deviceData = sycl::malloc_device<int>(numel, xpu_stream1);
+
+  // Copy hostData1 to deviceData via stream1, and then copy deviceData to
+  // hostData2 via stream2.
+  xpu_stream1.queue().memcpy(deviceData, hostData1, sizeof(int) * numel);
+  // stream2 wait on stream1's completion.
+  event.record(stream1);
+  event.block(stream2);
+  auto xpu_stream2 = c10::xpu::XPUStream(stream2);
+  xpu_stream2.queue().memcpy(hostData2, deviceData, sizeof(int) * numel);
+  xpu_stream2.synchronize();
+
+  EXPECT_TRUE(event.query());
+  validateHostData(hostData2, numel);
+  event.record(stream2);
+  EXPECT_TRUE(event.query());
+
+  clearHostData(hostData2, numel);
+  xpu_stream1.queue().memcpy(deviceData, hostData1, sizeof(int) * numel);
+  // stream2 wait on stream1's completion.
+  event.record(stream1);
+  event.block(stream2);
+  // event will overwrite the previously captured state.
+  event.record(stream2);
+  xpu_stream2.queue().memcpy(hostData2, deviceData, sizeof(int) * numel);
+  xpu_stream2.synchronize();
+  EXPECT_TRUE(event.query());
+  validateHostData(hostData2, numel);
+}
-- 
2.34.1

