From d34428cbfebfff8c5d9c02c7eec766ede3581914 Mon Sep 17 00:00:00 2001
From: "Yu, Guangye" <guangye.yu@intel.com>
Date: Thu, 9 May 2024 00:48:10 +0000
Subject: [PATCH 25/39] Support generic stream/event on XPU backend (#125751)

According to [#123611](https://github.com/pytorch/pytorch/pull/123611), we support generic stream/event on XPU backend.

new method/attribute on `torch.Event` for xpu
- torch.Event.event_id
- torch.Event.elapsed_time
- torch.Event.synchronize

new method on `c10::Event` on xpu backend
- c10.Event.event_id
- c10.Event.elapsed_time
- c10.Event.synchronize

Pull Request resolved: https://github.com/pytorch/pytorch/pull/125751
Approved by: https://github.com/jgong5, https://github.com/albanD

(cherry picked from commit 2ad794550a32465e3714ee9b12bb2a8cede860a9)
---
 c10/xpu/impl/XPUGuardImpl.h        | 17 +++++++++
 c10/xpu/test/impl/XPUGuardTest.cpp | 58 +++++++++++++++++++++---------
 test/test_xpu.py                   | 34 ++++++++++++++++++
 3 files changed, 92 insertions(+), 17 deletions(-)

diff --git a/c10/xpu/impl/XPUGuardImpl.h b/c10/xpu/impl/XPUGuardImpl.h
index d38688be4b1..351cb1d4e62 100644
--- a/c10/xpu/impl/XPUGuardImpl.h
+++ b/c10/xpu/impl/XPUGuardImpl.h
@@ -47,6 +47,10 @@ struct XPUGuardImpl final : public c10::impl::DeviceGuardImplInterface {
     return getCurrentXPUStream(d.index()).unwrap();
   }
 
+  Stream getNewStream(Device d, int priority = 0) const override {
+    return getStreamFromPool(priority, d.index());
+  }
+
   Stream getStreamFromGlobalPool(Device d, bool isHighPriority = false)
       const override {
     return getStreamFromPool(isHighPriority, d.index());
@@ -93,6 +97,7 @@ struct XPUGuardImpl final : public c10::impl::DeviceGuardImplInterface {
     if (xpu_event)
       delete xpu_event;
     xpu_event = new sycl::event(xpu_stream.queue().ext_oneapi_submit_barrier());
+    *event = reinterpret_cast<void*>(xpu_event);
   }
 
   void block(void* event, const Stream& stream) const override {
@@ -124,11 +129,23 @@ struct XPUGuardImpl final : public c10::impl::DeviceGuardImplInterface {
     xpu_stream.synchronize();
   }
 
+  void synchronizeEvent(void* event) const override {
+    if (!event)
+      return;
+    auto* xpu_event = reinterpret_cast<sycl::event*>(event);
+    xpu_event->wait_and_throw();
+  }
+
   void recordDataPtrOnStream(const c10::DataPtr& data_ptr, const Stream& stream)
       const override {
     const XPUStream xpu_stream{stream};
     XPUCachingAllocator::recordStream(data_ptr, xpu_stream);
   }
+
+  double elapsedTime(void* event1, void* event2) const override {
+    TORCH_CHECK_NOT_IMPLEMENTED(
+        false, "elapsedTime is not supported by XPU backend.");
+  }
 };
 
 } // namespace c10::xpu::impl
diff --git a/c10/xpu/test/impl/XPUGuardTest.cpp b/c10/xpu/test/impl/XPUGuardTest.cpp
index 7112068db3e..163b9a13d0e 100644
--- a/c10/xpu/test/impl/XPUGuardTest.cpp
+++ b/c10/xpu/test/impl/XPUGuardTest.cpp
@@ -54,7 +54,9 @@ TEST(XPUGuardTest, EventBehavior) {
   c10::impl::VirtualGuardImpl impl(device.type());
   c10::Stream stream1 = impl.getStream(device);
   c10::Stream stream2 = impl.getStream(device);
-  c10::Event event(device.type());
+  c10::Event event1(device.type());
+  // event is lazily created.
+  EXPECT_FALSE(event1.eventId());
 
   constexpr int numel = 1024;
   int hostData1[numel];
@@ -63,32 +65,54 @@ TEST(XPUGuardTest, EventBehavior) {
   clearHostData(hostData2, numel);
 
   auto xpu_stream1 = c10::xpu::XPUStream(stream1);
-  int* deviceData = sycl::malloc_device<int>(numel, xpu_stream1);
+  int* deviceData1 = sycl::malloc_device<int>(numel, xpu_stream1);
 
-  // Copy hostData1 to deviceData via stream1, and then copy deviceData to
+  // Copy hostData1 to deviceData1 via stream1, and then copy deviceData1 to
   // hostData2 via stream2.
-  xpu_stream1.queue().memcpy(deviceData, hostData1, sizeof(int) * numel);
+  xpu_stream1.queue().memcpy(deviceData1, hostData1, sizeof(int) * numel);
   // stream2 wait on stream1's completion.
-  event.record(stream1);
-  event.block(stream2);
+  event1.record(stream1);
+  event1.block(stream2);
   auto xpu_stream2 = c10::xpu::XPUStream(stream2);
-  xpu_stream2.queue().memcpy(hostData2, deviceData, sizeof(int) * numel);
+  xpu_stream2.queue().memcpy(hostData2, deviceData1, sizeof(int) * numel);
   xpu_stream2.synchronize();
 
-  EXPECT_TRUE(event.query());
+  EXPECT_TRUE(event1.query());
   validateHostData(hostData2, numel);
-  event.record(stream2);
-  EXPECT_TRUE(event.query());
+  event1.record(stream2);
+  event1.synchronize();
+  EXPECT_TRUE(event1.query());
 
   clearHostData(hostData2, numel);
-  xpu_stream1.queue().memcpy(deviceData, hostData1, sizeof(int) * numel);
+  xpu_stream1.queue().memcpy(deviceData1, hostData1, sizeof(int) * numel);
   // stream2 wait on stream1's completion.
-  event.record(stream1);
-  event.block(stream2);
-  // event will overwrite the previously captured state.
-  event.record(stream2);
-  xpu_stream2.queue().memcpy(hostData2, deviceData, sizeof(int) * numel);
+  event1.record(stream1);
+  event1.block(stream2);
+  // event1 will overwrite the previously captured state.
+  event1.record(stream2);
+  xpu_stream2.queue().memcpy(hostData2, deviceData1, sizeof(int) * numel);
   xpu_stream2.synchronize();
-  EXPECT_TRUE(event.query());
+  EXPECT_TRUE(event1.query());
   validateHostData(hostData2, numel);
+
+  clearHostData(hostData2, numel);
+  // ensure deviceData1 and deviceData2 are different buffers.
+  int* deviceData2 = sycl::malloc_device<int>(numel, xpu_stream1);
+  sycl::free(deviceData1, c10::xpu::get_device_context());
+  c10::Event event2(device.type());
+
+  // Copy hostData1 to deviceData2 via stream1, and then copy deviceData2 to
+  // hostData1 via stream1.
+  xpu_stream1.queue().memcpy(deviceData2, hostData1, sizeof(int) * numel);
+  event2.record(xpu_stream1);
+  event2.synchronize();
+  EXPECT_TRUE(event2.query());
+  clearHostData(hostData1, numel);
+  xpu_stream1.queue().memcpy(hostData1, deviceData2, sizeof(int) * numel);
+  event2.record(xpu_stream1);
+  event2.synchronize();
+  EXPECT_TRUE(event2.query());
+  EXPECT_NE(event1.eventId(), event2.eventId());
+  ASSERT_THROW(event1.elapsedTime(event2), c10::Error);
+  sycl::free(deviceData2, c10::xpu::get_device_context());
 }
diff --git a/test/test_xpu.py b/test/test_xpu.py
index 09da0569e28..c1a00daf2a3 100644
--- a/test/test_xpu.py
+++ b/test/test_xpu.py
@@ -108,6 +108,40 @@ if __name__ == "__main__":
         event.synchronize()
         self.assertTrue(event.query())
 
+    def test_generic_stream_event(self):
+        stream = torch.Stream("xpu")
+        self.assertEqual(stream.device_index, torch.xpu.current_device())
+        xpu_stream = torch.xpu.Stream(
+            stream_id=stream.stream_id,
+            device_index=stream.device_index,
+            device_type=stream.device_type,
+        )
+        self.assertEqual(stream.stream_id, xpu_stream.stream_id)
+        self.assertNotEqual(stream.stream_id, torch.xpu.current_stream().stream_id)
+
+        event1 = torch.Event("xpu")
+        event2 = torch.Event("xpu")
+        self.assertEqual(event1.event_id, 0)
+        a = torch.randn(1000)
+        b = torch.randn(1000)
+        with torch.xpu.stream(xpu_stream):
+            a_xpu = a.to("xpu", non_blocking=True)
+            b_xpu = b.to("xpu", non_blocking=True)
+            self.assertEqual(stream.stream_id, torch.xpu.current_stream().stream_id)
+        event1.record(stream)
+        event1.synchronize()
+        self.assertTrue(event1.query())
+        c_xpu = a_xpu + b_xpu
+        event2.record()
+        event2.synchronize()
+        self.assertTrue(event2.query())
+        self.assertNotEqual(event1.event_id, event2.event_id)
+        self.assertEqual(c_xpu.cpu(), a + b)
+        with self.assertRaisesRegex(
+            NotImplementedError, "elapsedTime is not supported by XPU backend."
+        ):
+            event1.elapsed_time(event2)
+
     def test_generator(self):
         torch.manual_seed(2024)
         g_state0 = torch.xpu.get_rng_state()
-- 
2.34.1

