From b749f1a31f4720b47cd399126cb160db9b19a1f7 Mon Sep 17 00:00:00 2001
From: "Yu, Guangye" <guangye.yu@intel.com>
Date: Wed, 3 Jul 2024 18:55:00 +0000
Subject: [PATCH 01/39] Revert "necessary change to make torch2.3 work with
 triton2.2 (#122139)"

This reverts commit c4e5434423e052ddb81a15eba796de5b6c9ee599.
---
 torch/_higher_order_ops/triton_kernel_wrap.py | 19 +++---
 torch/utils/_triton.py                        | 60 +++----------------
 2 files changed, 16 insertions(+), 63 deletions(-)

diff --git a/torch/_higher_order_ops/triton_kernel_wrap.py b/torch/_higher_order_ops/triton_kernel_wrap.py
index 89b94561aff..62cc89f85f6 100644
--- a/torch/_higher_order_ops/triton_kernel_wrap.py
+++ b/torch/_higher_order_ops/triton_kernel_wrap.py
@@ -95,6 +95,7 @@ def generate_ttir(kernel, kwargs):
     """
     Uses Triton's internal code generation to create TTIR
     """
+    import triton
     from triton.compiler.compiler import ASTSource
     from triton.runtime.autotuner import Autotuner
     from triton.runtime.jit import JITFunction
@@ -144,21 +145,15 @@ def generate_ttir(kernel, kwargs):
         if i not in kernel.constexprs
     }
 
-    def get_backend():
-        from triton.compiler.backends.cuda import CUDABackend
-        from triton.runtime.driver import driver
-
-        target = driver.get_current_target()
-        return CUDABackend(target)
-
-    backend = get_backend()
-
+    context = triton._C.libtriton.ir.context()
+    target = triton.runtime.driver.active.get_current_target()
+    backend = triton.compiler.compiler.make_backend(target)
     options = backend.parse_options(dict())
-    # triton._C.libtriton.triton.ir.load_dialects(context)
-    # backend.load_dialects(context)
+    triton._C.libtriton.ir.load_dialects(context)
+    backend.load_dialects(context)
 
     src = ASTSource(kernel, signature, constants, specialization)
-    ttir_module = src.make_ir(options)
+    ttir_module = src.make_ir(options, context)
     if not ttir_module.verify():
         raise Exception("Verification for TTIR module has failed")
 
diff --git a/torch/utils/_triton.py b/torch/utils/_triton.py
index 865b34c28b3..a568d9eb981 100644
--- a/torch/utils/_triton.py
+++ b/torch/utils/_triton.py
@@ -1,6 +1,5 @@
 import functools
 import hashlib
-import os
 
 from torch._dynamo.device_interface import get_interface_for_device
 
@@ -33,61 +32,18 @@ def has_triton() -> bool:
 
 
 @functools.lru_cache(None)
-def triton_backend_hash():
-    from triton.common.backend import get_backend, get_cuda_version_key
-
+def triton_backend():
     import torch
 
     if torch.version.hip:
         # Does not work with ROCm
         return None
 
-    if not torch.cuda.is_available():
-        return None
+    from triton.compiler.compiler import make_backend
+    from triton.runtime.driver import driver
 
-    backend = get_backend("cuda")
-    if backend is None:
-        return get_cuda_version_key()
-    else:
-        return backend.get_version_key()
-
-
-@functools.lru_cache
-def triton_key():
-    import pkgutil
-
-    import triton
-
-    TRITON_PATH = os.path.dirname(os.path.abspath(triton.__file__))
-    contents = []
-    # This is redundant. Doing it to be consistent with upstream.
-    # frontend
-    with open(os.path.join(TRITON_PATH, "compiler", "compiler.py"), "rb") as f:
-        contents += [hashlib.sha256(f.read()).hexdigest()]
-
-    # compiler
-    compiler_path = os.path.join(TRITON_PATH, "compiler")
-    backends_path = os.path.join(TRITON_PATH, "compiler", "backends")
-    for lib in pkgutil.iter_modules([compiler_path, backends_path]):
-        with open(lib.module_finder.find_spec(lib.name).origin, "rb") as f:  # type: ignore[call-arg, union-attr, arg-type]
-            contents += [hashlib.sha256(f.read()).hexdigest()]
-    # backend
-    libtriton_hash = hashlib.sha256()
-    with open(os.path.join(TRITON_PATH, "_C/libtriton.so"), "rb") as f:
-        while True:
-            chunk = f.read(1024**2)
-            if not chunk:
-                break
-            libtriton_hash.update(chunk)
-    contents.append(libtriton_hash.hexdigest())
-    # language
-    language_path = os.path.join(TRITON_PATH, "language")
-    for lib in pkgutil.iter_modules([language_path]):
-        with open(lib.module_finder.find_spec(lib.name).origin, "rb") as f:  # type: ignore[call-arg, union-attr, arg-type]
-            contents += [hashlib.sha256(f.read()).hexdigest()]
-    from triton import __version__
-
-    return f"{__version__}" + "-".join(contents)
+    target = driver.active.get_current_target()
+    return make_backend(target)
 
 
 @functools.lru_cache(None)
@@ -98,6 +54,8 @@ def triton_hash_with_backend():
         # Does not work with ROCm
         return None
 
-    backend_hash = triton_backend_hash()
-    key = f"{triton_key()}-{backend_hash}"
+    from triton.compiler.compiler import triton_key
+
+    backend = triton_backend()
+    key = f"{triton_key()}-{backend.hash()}"
     return hashlib.sha256(key.encode("utf-8")).hexdigest()
-- 
2.34.1

