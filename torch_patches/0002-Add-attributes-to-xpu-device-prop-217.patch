From a4d0435231c54a926f8761055b1906eac4bfa405 Mon Sep 17 00:00:00 2001
From: xingyuan li <108672484+hoshibara@users.noreply.github.com>
Date: Wed, 27 Mar 2024 11:36:19 +0800
Subject: [PATCH 02/39] Add attributes to xpu device prop (#217)

(cherry picked from commit b21b73051599eba6b91f38a2b4bed9181c4a7069)

Co-authored-by: Yu, Guangye <guangye.yu@intel.com>
---
 c10/xpu/XPUDeviceProp.h   | 17 ++++++++++++++++-
 c10/xpu/XPUFunctions.cpp  |  5 +++++
 torch/_C/__init__.pyi.in  |  6 ++++++
 torch/csrc/xpu/Module.cpp | 14 ++++++++++++--
 torch/xpu/__init__.py     |  7 +++----
 5 files changed, 42 insertions(+), 7 deletions(-)

diff --git a/c10/xpu/XPUDeviceProp.h b/c10/xpu/XPUDeviceProp.h
index 2627ce8620d..7c7381fd290 100644
--- a/c10/xpu/XPUDeviceProp.h
+++ b/c10/xpu/XPUDeviceProp.h
@@ -126,6 +126,16 @@ namespace c10::xpu {
   /* the number of hardware threads per EU of GPU. */    \
   _(gpu_hw_threads_per_eu, 8)
 
+#define AT_FORALL_XPU_DEVICE_ASPECT(_)                  \
+  /* sycl::half is supported on device. */              \
+  _(fp16)                                               \
+                                                        \
+  /* double is supported on device. */                  \
+  _(fp64)                                               \
+                                                        \
+  /* 64-bit atomic operation is supported on device. */ \
+  _(atomic64)
+
 #define _DEFINE_SYCL_PROP(ns, property, member) \
   ns::property::return_type member;
 
@@ -138,18 +148,23 @@ namespace c10::xpu {
 #define DEFINE_EXT_DEVICE_PROP(property, ...) \
   _DEFINE_SYCL_PROP(sycl::ext::intel::info::device, property, property)
 
+#define DEFINE_DEVICE_ASPECT(member) bool has_##member;
+
 struct C10_XPU_API DeviceProp {
   AT_FORALL_XPU_DEVICE_PROPERTIES(DEFINE_DEVICE_PROP);
 
   // the platform name.
   DEFINE_PLATFORM_PROP(name, platform_name);
 
-  AT_FORALL_XPU_EXT_DEVICE_PROPERTIES(DEFINE_EXT_DEVICE_PROP)
+  AT_FORALL_XPU_EXT_DEVICE_PROPERTIES(DEFINE_EXT_DEVICE_PROP);
+
+  AT_FORALL_XPU_DEVICE_ASPECT(DEFINE_DEVICE_ASPECT);
 };
 
 #undef _DEFINE_SYCL_PROP
 #undef DEFINE_DEVICE_PROP
 #undef DEFINE_PLATFORM_PROP
 #undef DEFINE_EXT_DEVICE_PROP
+#undef DEFINE_DEVICE_ASPECT
 
 } // namespace c10::xpu
diff --git a/c10/xpu/XPUFunctions.cpp b/c10/xpu/XPUFunctions.cpp
index 853d01eefa1..15e24d94f5d 100644
--- a/c10/xpu/XPUFunctions.cpp
+++ b/c10/xpu/XPUFunctions.cpp
@@ -78,12 +78,17 @@ void initDeviceProperties(DeviceProp* device_prop, int device) {
       ? raw_device.get_info<intel::info::device::property>()                 \
       : default_value;
 
+#define ASSIGN_DEVICE_ASPECT(member) \
+  device_prop->has_##member = raw_device.has(sycl::aspect::member);
+
   AT_FORALL_XPU_DEVICE_PROPERTIES(ASSIGN_DEVICE_PROP);
 
   device_prop->platform_name =
       raw_device.get_info<device::platform>().get_info<platform::name>();
 
   AT_FORALL_XPU_EXT_DEVICE_PROPERTIES(ASSIGN_EXT_DEVICE_PROP);
+
+  AT_FORALL_XPU_DEVICE_ASPECT(ASSIGN_DEVICE_ASPECT);
   return;
 }
 
diff --git a/torch/_C/__init__.pyi.in b/torch/_C/__init__.pyi.in
index 516072b531d..8857df5976e 100644
--- a/torch/_C/__init__.pyi.in
+++ b/torch/_C/__init__.pyi.in
@@ -1894,6 +1894,9 @@ def _xpu_emptyCache() -> None: ...
 class _XpuDeviceProperties:
     name: str
     platform_name: str
+    vendor: str
+    driver_version: str
+    version: str
     total_memory: _int
     max_compute_units: _int
     gpu_eu_count: _int
@@ -1901,6 +1904,9 @@ class _XpuDeviceProperties:
     max_work_group_size: _int
     max_num_sub_groups: _int
     sub_group_sizes: List[_int]
+    has_fp16: _bool
+    has_fp64: _bool
+    has_atomic64: _bool
     type: str
 
 # Defined in torch/csrc/xpu/Stream.cpp
diff --git a/torch/csrc/xpu/Module.cpp b/torch/csrc/xpu/Module.cpp
index d63d48410bd..7bf8abdef20 100644
--- a/torch/csrc/xpu/Module.cpp
+++ b/torch/csrc/xpu/Module.cpp
@@ -227,6 +227,9 @@ static void registerXpuDeviceProperties(PyObject* module) {
   py::class_<DeviceProp>(m, "_XpuDeviceProperties")
       .def_readonly("name", &DeviceProp::name)
       .def_readonly("platform_name", &DeviceProp::platform_name)
+      .def_readonly("vendor", &DeviceProp::vendor)
+      .def_readonly("driver_version", &DeviceProp::driver_version)
+      .def_readonly("version", &DeviceProp::version)
       .def_readonly("total_memory", &DeviceProp::global_mem_size)
       .def_readonly("max_compute_units", &DeviceProp::max_compute_units)
       .def_readonly("gpu_eu_count", &DeviceProp::gpu_eu_count)
@@ -234,6 +237,9 @@ static void registerXpuDeviceProperties(PyObject* module) {
       .def_readonly("max_work_group_size", &DeviceProp::max_work_group_size)
       .def_readonly("max_num_sub_groups", &DeviceProp::max_num_sub_groups)
       .def_readonly("sub_group_sizes", &DeviceProp::sub_group_sizes)
+      .def_readonly("has_fp16", &DeviceProp::has_fp16)
+      .def_readonly("has_fp64", &DeviceProp::has_fp64)
+      .def_readonly("has_atomic64", &DeviceProp::has_atomic64)
       .def_property_readonly("type", get_device_type)
       .def(
           "__repr__",
@@ -241,14 +247,18 @@ static void registerXpuDeviceProperties(PyObject* module) {
             std::ostringstream stream;
             stream << "_XpuDeviceProperties(name='" << prop.name
                    << "', platform_name='" << prop.platform_name << "', type='"
-                   << get_device_type(prop) << ", total_memory="
+                   << get_device_type(prop) << "', driver_version='"
+                   << prop.driver_version << "', total_memory="
                    << prop.global_mem_size / (1024ull * 1024)
                    << "MB, max_compute_units=" << prop.max_compute_units
                    << ", gpu_eu_count=" << prop.gpu_eu_count
                    << ", gpu_subslice_count=" << gpu_subslice_count(prop)
                    << ", max_work_group_size=" << prop.max_work_group_size
                    << ", max_num_sub_groups=" << prop.max_num_sub_groups
-                   << ", sub_group_sizes=[" << prop.sub_group_sizes << "])";
+                   << ", sub_group_sizes=[" << prop.sub_group_sizes
+                   << "], has_fp16=" << prop.has_fp16
+                   << ", has_fp64=" << prop.has_fp64
+                   << ", has_atomic64=" << prop.has_atomic64 << ")";
             return stream.str();
           });
 }
diff --git a/torch/xpu/__init__.py b/torch/xpu/__init__.py
index 4184ac8eee2..203df178f8a 100644
--- a/torch/xpu/__init__.py
+++ b/torch/xpu/__init__.py
@@ -214,6 +214,7 @@ def get_device_name(device: Optional[_device_t] = None) -> str:
     return get_device_properties(device).name
 
 
+@lru_cache(None)
 def get_device_capability(device: Optional[_device_t] = None) -> Dict[str, Any]:
     r"""Get the xpu capability of a device.
 
@@ -227,11 +228,9 @@ def get_device_capability(device: Optional[_device_t] = None) -> Dict[str, Any]:
     Returns:
         Dict[str, Any]: the xpu capability dictionary of the device
     """
-    prop = get_device_properties(device)
+    props = get_device_properties(device)
     return {
-        "max_work_group_size": prop.max_work_group_size,
-        "max_num_sub_groups": prop.max_num_sub_groups,
-        "sub_group_sizes": prop.sub_group_sizes,
+        prop: getattr(props, prop) for prop in dir(props) if not prop.startswith("__")
     }
 
 
-- 
2.34.1

