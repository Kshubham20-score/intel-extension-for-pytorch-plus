# Copyright (c) 2024 Intel Corporation
# SPDX-License-Identifier: Apache 2.0

# NOTE: To build this you will need a docker version >= 19.03 and DOCKER_BUILDKIT=1
#
#       If you do not use buildkit you are not going to have a good time
#
#       For reference:
#           https://docs.docker.com/develop/develop-images/build_enhancements/

ARG BASE_IMAGE=ubuntu:22.04
FROM ${BASE_IMAGE} AS base
RUN if [ -f /etc/apt/apt.conf.d/proxy.conf ]; then rm /etc/apt/apt.conf.d/proxy.conf; fi && \
    if [ ! -z ${HTTP_PROXY} ]; then echo "Acquire::http::Proxy \"${HTTP_PROXY}\";" >> /etc/apt/apt.conf.d/proxy.conf; fi && \
    if [ ! -z ${HTTPS_PROXY} ]; then echo "Acquire::https::Proxy \"${HTTPS_PROXY}\";" >> /etc/apt/apt.conf.d/proxy.conf; fi
RUN apt update && \
    apt full-upgrade -y && \
    DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -y \
    ca-certificates \
    git \
    curl \
    wget \
    vim \
    numactl \
    gcc-12 \
    g++-12 \
    python3 \
    python3-dev \
    python3-pip \
    make
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 && \
    update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 100 && \
    update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 100 && \
    update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 100 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 100
RUN apt clean && \
    rm -rf /var/lib/apt/lists/* && \
    if [ -f /etc/apt/apt.conf.d/proxy.conf ]; then rm /etc/apt/apt.conf.d/proxy.conf; fi

WORKDIR /root
ENV PATH=/root/.local/bin:${PATH}

FROM base AS dev
COPY . ./intel-extension-for-pytorch
RUN cp ./intel-extension-for-pytorch/scripts/compile_bundle.sh ./ && \
    sed -i "s/VER_IPEX=.*/VER_IPEX=/" compile_bundle.sh
RUN CC=gcc CXX=g++ bash compile_bundle.sh && \
    cd intel-extension-for-pytorch && \
    VER_TORCH=$(python tools/dep_ver_utils.py -f dependency_version.json -k pytorch:version) && \
    VER_TORCHVISION=$(python tools/dep_ver_utils.py -f dependency_version.json -k torchvision:version) && \
    VER_TORCHAUDIO=$(python tools/dep_ver_utils.py -f dependency_version.json -k torchaudio:version) && \
    cd .. && \
    echo ${VER_TORCH} | grep "dev" > /dev/null; TORCH_DEV=$?; URL_NIGHTLY=""; if [ ${TORCH_DEV} -eq 0 ]; then URL_NIGHTLY="nightly/"; fi; echo "#!/bin/bash\npython -m pip install torch==${VER_TORCH} torchvision==${VER_TORCHVISION} torchaudio==${VER_TORCHAUDIO} --index-url https://download.pytorch.org/whl/${URL_NIGHTLY}cpu" > torch_install.sh

FROM base AS deploy
COPY --from=dev /root/intel-extension-for-pytorch/dist ./wheels
COPY --from=dev /root/torch_install.sh .
RUN bash ./torch_install.sh && rm ./torch_install.sh && \
    python -m pip install ./wheels/*.whl && \
    python -m pip install intel-openmp==2024.1.2 && \
    python -m pip cache purge && \
    rm -rf ./wheels && \
    echo "echo \"**Note:** For better performance, please consider to launch workloads with command 'ipexrun'.\"" >> ./.bashrc
